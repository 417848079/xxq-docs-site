import{_ as i,D as d,c as p,j as s,I as t,w as l,a,a4 as e,o}from"./chunks/framework.C1Yd8iPn.js";const N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/docker/docker安装redis.md","filePath":"docs/docker/docker安装redis.md"}'),r={name:"docs/docker/docker安装redis.md"},c=s("h2",{id:"docker-安装-redis",tabindex:"-1"},[a("docker 安装 redis "),s("a",{class:"header-anchor",href:"#docker-安装-redis","aria-label":'Permalink to "docker 安装 redis"'},"​")],-1),_=e(`<li><h2 id="_1-注意" tabindex="-1">1.注意 <a class="header-anchor" href="#_1-注意" aria-label="Permalink to &quot;1.注意&quot;">​</a></h2><ul><li>a. 启动前需要先创建 Redis 外部挂载的配置文件 （ /home/redis/conf/redis.conf ）</li><li>b. 之所以要先创建 , 是因为 Redis 本身容器只存在 /etc/redis 目录 , 本身就不创建 redis.conf 文件</li><li>c. 当服务器和容器都不存在 redis.conf 文件时, 执行启动命令的时候 docker 会将 redis.conf 作为目录创建 , 这并不是我们想要的结果 。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 创建目录</span></span>
<span class="line"><span>mkdir -p /mydata/redis/conf</span></span>
<span class="line"><span>mkdir -p /mydata/redis/data</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 创建文件</span></span>
<span class="line"><span></span></span>
<span class="line"><span>touch /mydata/redis/conf/redis.conf</span></span></code></pre></div></li>`,1),h=e('<h2 id="_2-创建-redist-容器并启动" tabindex="-1">2. 创建 redist 容器并启动 <a class="header-anchor" href="#_2-创建-redist-容器并启动" aria-label="Permalink to &quot;2. 创建 redist 容器并启动&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run -p 6379:6379 --name redis -v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf -v /mydata/redis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes</span></span></code></pre></div>',2),u={tabindex:"0"},f=s("th",{style:{"text-align":"left"}},"命令",-1),y={style:{"text-align":"left"}},g=s("tbody",null,[s("tr",null,[s("td",{style:{"text-align":"left"}},"docker run"),s("td",{style:{"text-align":"left"}},"这是 Docker 用来创建并运行一个新的容器的命令")]),s("tr",null,[s("td",{style:{"text-align":"left"}},"-- restart=always"),s("td",{style:{"text-align":"left"}},"如果容器退出，这个选项会使得它自动重启")]),s("tr",null,[s("td",{style:{"text-align":"left"}},"--log-opt max-size=100m"),s("td",{style:{"text-align":"left"}},"这是对容器日志的设置，最大大小为 100MB")]),s("tr",null,[s("td",{style:{"text-align":"left"}},"--log-opt max-file=2"),s("td",{style:{"text-align":"left"}},"这是对容器日志文件的设置，最多可以有 2 个日志文件")]),s("tr",null,[s("td",{style:{"text-align":"left"}},"-p 6379:6379"),s("td",{style:{"text-align":"left"}},"这是端口映射的设置，将宿主机的 6379 端口映射到容器的 6379 端口")]),s("tr",null,[s("td",{style:{"text-align":"left"}},"--name redis"),s("td",{style:{"text-align":"left"}},'这是给新创建的容器命名的选项，名字是 "redis"')]),s("tr",null,[s("td",{style:{"text-align":"left"}},"redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass 123456"),s("td",{style:{"text-align":"left"}},'这是容器内要运行的命令，启动 Redis 服务，使用 /etc/redis/redis.conf 配置文件，设置追加写入(appendonly)为 yes，设置密码为 "123456"')])],-1),m=e(`<h2 id="_3-redis-配置文件修改" tabindex="-1">3 .Redis 配置文件修改 <a class="header-anchor" href="#_3-redis-配置文件修改" aria-label="Permalink to &quot;3 .Redis 配置文件修改&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 修改 /mydata/redis/conf/redis.conf</span></span>
<span class="line"><span>protected-mode no</span></span>
<span class="line"><span>bind 0.0.0.0</span></span></code></pre></div>`,2),b={tabindex:"0"},k=s("th",null,"命令",-1),x=s("tbody",null,[s("tr",null,[s("td",null,"protected-mode no"),s("td",null,"关闭 protected-mode 模式，此时外部网络可以直接访问 (docker 貌似自动开启了)")]),s("tr",null,[s("td",null,"bind 0.0.0.0"),s("td",null,"设置所有 IP 都可以访问 (docker 貌似自动开启了)")])],-1),v=e(`<li><h2 id="_4-redis-conf-文件" tabindex="-1">4.redis.conf 文件 <a class="header-anchor" href="#_4-redis-conf-文件" aria-label="Permalink to &quot;4.redis.conf 文件&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#注释掉这部分，这是限制redis只能本地访问</span></span>
<span class="line"><span>bind 127.0.0.1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#默认yes，开启保护模式，限制为本地访问</span></span>
<span class="line"><span>protected-mode no</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#默认no，改为yes意为以守护进程方式启动，可后台运行，除非kill进程，改为yes会使配置文件方#式启动redis失败</span></span>
<span class="line"><span>daemonize no</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#redis持久化（可选）</span></span>
<span class="line"><span>appendonly yes</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#设置密码</span></span>
<span class="line"><span>requirepass 123456</span></span></code></pre></div></li>`,1);function T(C,P,S,A,V,q){const n=d("center");return o(),p("div",null,[c,s("ul",null,[_,s("li",null,[h,s("table",u,[s("thead",null,[s("tr",null,[f,s("th",y,[t(n,null,{default:l(()=>[a("功能 ")]),_:1})])])]),g])]),s("li",null,[m,s("table",b,[s("thead",null,[s("tr",null,[k,s("th",null,[t(n,null,{default:l(()=>[a("功能")]),_:1})])])]),x])]),v])])}const R=i(r,[["render",T]]);export{N as __pageData,R as default};

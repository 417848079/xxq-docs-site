import{_ as a,c as e,o as t,a4 as r}from"./chunks/framework.C1Yd8iPn.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/interview-question/JAVA面试题.md","filePath":"docs/interview-question/JAVA面试题.md"}'),o={name:"docs/interview-question/JAVA面试题.md"},i=r('<h2 id="_1-面向对象编程有哪些特征" tabindex="-1">1. 面向对象编程有哪些特征 <a class="header-anchor" href="#_1-面向对象编程有哪些特征" aria-label="Permalink to &quot;1. 面向对象编程有哪些特征&quot;">​</a></h2><p>面向对象编程（Object-Oriented Programming，OOP）具有以下主要特征：</p><ul><li><h4 id="_1-封装-encapsulation" tabindex="-1">1. 封装（Encapsulation）： <a class="header-anchor" href="#_1-封装-encapsulation" aria-label="Permalink to &quot;1. 封装（Encapsulation）：&quot;">​</a></h4> 将数据和操作数据的方法封装在一个类中，对外部隐藏类的内部实现细节，只通过公共的接口来访问类的成员。例如，将一个学生的信息（姓名、年龄、成绩等）和相关的操作（计算平均成绩、更新信息等）封装在 Student 类中。外部代码不能直接访问和修改类内部的私有数据，只能通过公共方法来进行操作。</li><li><h4 id="_2-继承-inheritance" tabindex="-1">2. 继承（Inheritance）： <a class="header-anchor" href="#_2-继承-inheritance" aria-label="Permalink to &quot;2. 继承（Inheritance）：&quot;">​</a></h4> 允许创建一个新类从已有的类中继承属性和方法，实现代码的复用和扩展。比如，创建一个 UndergraduateStudent 类继承自 Student 类，可以复用 Student 类中的通用属性和方法，并添加本科生特有的属性和方法。</li><li><h4 id="_3-多态-polymorphism" tabindex="-1">3. 多态（Polymorphism）： <a class="header-anchor" href="#_3-多态-polymorphism" aria-label="Permalink to &quot;3. 多态（Polymorphism）：&quot;">​</a></h4> 分为两种类型，编译时多态（方法重载）和运行时多态（方法重写）。编译时多态是指在同一个类中，方法名相同但参数不同的多个方法。运行时多态是指子类可以重写父类的方法，在运行时根据对象的实际类型来决定调用哪个具体的方法。例如，有一个父类 Shape 和子类 Circle 、 Rectangle ，它们都有 draw 方法，通过父类引用指向子类对象，调用 draw 方法时会执行子类中重写的方法。</li><li><h4 id="_4-抽象-abstraction" tabindex="-1">4. 抽象（Abstraction）： <a class="header-anchor" href="#_4-抽象-abstraction" aria-label="Permalink to &quot;4. 抽象（Abstraction）：&quot;">​</a></h4> 提取出类或对象的本质特征，忽略非本质的细节。通过抽象类和接口来实现，强制子类实现某些方法或规定类的结构。比如定义一个抽象的 Animal 类，规定所有子类必须实现 eat 和 move 方法，但不给出具体实现。 这些特征使得面向对象编程更加模块化、可复用、可扩展和易于维护，能够更好地模拟现实世界中的复杂系统。</li></ul><h2 id="_2-jdk-和-jre-的区别" tabindex="-1">2. jdk 和 jre 的区别 <a class="header-anchor" href="#_2-jdk-和-jre-的区别" aria-label="Permalink to &quot;2. jdk 和 jre 的区别&quot;">​</a></h2><p>JDK（Java Development Kit，Java 开发工具包）和 JRE（Java Runtime Environment，Java 运行时环境）有以下主要区别：</p><h4 id="功能" tabindex="-1">功能： <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能：&quot;">​</a></h4><blockquote><p>JDK 包含了开发 Java 程序所需的工具和资源，不仅包括 JRE 中的运行时环境，还提供了编译器（javac）、调试工具（如 jdb）、文档生成工具（javadoc）等，用于编写、编译、调试和运行 Java 应用程序。<br> JRE 则主要用于运行 Java 程序，它包含了 Java 虚拟机（JVM）、核心类库和支持文件，确保 Java 程序能够在计算机上正常运行，但不包含开发工具。</p></blockquote><h4 id="用途" tabindex="-1">用途： <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途：&quot;">​</a></h4><blockquote><p>如果您要开发 Java 应用程序、小程序或 Web 应用，就需要安装 JDK。<br> 如果您只是想运行已有的 Java 应用程序，而不需要进行开发，那么安装 JRE 就足够了。<br> 例如，一个软件开发者在编写和测试新的 Java 代码时，会使用 JDK 。而普通用户在运行一个基于 Java 的游戏或办公软件时，计算机上只需安装 JRE 来支持程序的运行。 总的来说，JDK 适用于开发者，JRE 适用于普通用户运行 Java 程序。</p></blockquote>',9),n=[i];function l(c,d,h,s,_,u){return t(),e("div",null,n)}const J=a(o,[["render",l]]);export{p as __pageData,J as default};
